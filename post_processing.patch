diff --git a/skewCorrector.py b/SkewCorrector/lib/skewCorrector.py
similarity index 66%
rename from skewCorrector.py
rename to SkewCorrector/lib/skewCorrector.py
index bf34487..14d2730 100644
--- a/skewCorrector.py
+++ b/SkewCorrector/lib/skewCorrector.py
@@ -1,24 +1,34 @@
 import cv2
 import numpy as np
+import tempfile
+from ImgScanner import settings
+import io
 
 #{{ SkewCorrection.cover.url }}
 path = "media/media/aetna_rotated.png"
-img = cv2.imread(path)
+# img = cv2.imread(path)
 
 class Correction:
 
     def __init__(self, img):
-        self.img = img
+        # self.name = img.name
+        # self.result_file_path = "{}/media/output/{}".format(
+        #     settings.BASE_DIR, self.name)
+        self.result_file_path = img.replace('/media/media', '/media/output')
+        # self.img = cv2.imdecode(
+        #     np.fromstring(img.read(), np.uint8), cv2.IMREAD_UNCHANGED)
+        self.img = cv2.imread(img)
 
-    def preProcess(self, img):
-        imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
+
+    def preProcess(self):
+        imgGray = cv2.cvtColor(self.img, cv2.COLOR_BGR2GRAY)
         imgBlur = cv2.GaussianBlur(imgGray, (5, 5), 0)
         imgCanny = cv2.Canny(imgBlur, 1.3, 10)
         imgThresh = cv2.threshold(imgCanny, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
         return imgThresh
 
-    def skewFix(self, img):
-        processedImg = self.preProcess(img)
+    def skewFix(self):
+        processedImg = self.preProcess()
         coords = np.column_stack(np.where(processedImg > 0))
         angle = cv2.minAreaRect(coords)[-1]
 
@@ -30,14 +40,15 @@ class Correction:
         (h, w) = processedImg.shape[:2]
         center = (w // 2, h // 2)
         M = cv2.getRotationMatrix2D(center, angle, 1)
-        rotated = cv2.warpAffine(img, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
-        cv2.imwrite('media/output/imgSkewed.png', rotated)
+        rotated = cv2.warpAffine(self.img, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
+
+        cv2.imwrite(self.result_file_path, rotated)
         print("Angle: {:.2f} degrees".format(angle))
 
         # draw the correction angle on the image so we can validate it
         cv2.putText(rotated, "Angle: {:.2f} degrees".format(angle), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7,
                     (0, 0, 255), 2)
-        return rotated
+        return [self.result_file_path, angle]
 
 
 # processedImg = preProcess(img)
@@ -64,4 +75,4 @@ class Correction:
 # cv2.waitKey(0)
 
 # A = Correction
-# A.skewFix(A, img)
\ No newline at end of file
+# A.skewFix(A, img)
diff --git a/SkewCorrector/migrations/0002_auto_20200713_0648.py b/SkewCorrector/migrations/0002_auto_20200713_0648.py
new file mode 100644
index 0000000..d7e534f
--- /dev/null
+++ b/SkewCorrector/migrations/0002_auto_20200713_0648.py
@@ -0,0 +1,23 @@
+# Generated by Django 3.0.8 on 2020-07-13 06:48
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('SkewCorrector', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='post',
+            name='processed_cover',
+            field=models.ImageField(blank=True, upload_to='output/'),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='cover',
+            field=models.ImageField(upload_to='media/'),
+        ),
+    ]
diff --git a/SkewCorrector/migrations/0003_post_rotate_angle.py b/SkewCorrector/migrations/0003_post_rotate_angle.py
new file mode 100644
index 0000000..0020a36
--- /dev/null
+++ b/SkewCorrector/migrations/0003_post_rotate_angle.py
@@ -0,0 +1,18 @@
+# Generated by Django 3.0.8 on 2020-07-13 13:43
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('SkewCorrector', '0002_auto_20200713_0648'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='post',
+            name='rotate_angle',
+            field=models.FloatField(blank=True, null=True),
+        ),
+    ]
diff --git a/SkewCorrector/models.py b/SkewCorrector/models.py
index 2768b18..be2e14e 100644
--- a/SkewCorrector/models.py
+++ b/SkewCorrector/models.py
@@ -1,13 +1,24 @@
 from django.db import models
-from skewCorrector import Correction
+from SkewCorrector.lib.skewCorrector import Correction
+from django.db.models.signals import post_save
+from django.dispatch import receiver
+from django.core.files import File
 
 # Create your models here.
 class Post(models.Model):
     title = models.CharField(max_length=100)
     cover = models.ImageField(upload_to='media/')
-    A = Correction(cover)
-    postSkew = A.skewFix(cover)
+    processed_cover = models.ImageField(upload_to='output/', blank=True)
+    rotate_angle = models.FloatField(null=True, blank=True)
+
+@receiver(post_save, sender=Post, dispatch_uid="")
+def update_processed_cover(sender, instance, created, **kwargs):
+    if created:
+        correction = Correction(instance.cover.path)
+        result_path, angle = correction.skewFix()
+        with open(result_path, 'rb') as file:
+            instance.processed_cover = File(file)
+            instance.rotate_angle = angle
+            instance.save()
 
-    def __unicode__(self):
-        return self.title
 
diff --git a/SkewCorrector/views.py b/SkewCorrector/views.py
index 3937f24..ce538e6 100644
--- a/SkewCorrector/views.py
+++ b/SkewCorrector/views.py
@@ -3,9 +3,10 @@ from django.urls import reverse_lazy
 from SkewCorrector.models import Post
 from django.views.generic import ListView, CreateView
 from django.conf import settings
-from skewCorrector import Correction
+from SkewCorrector.lib.skewCorrector import Correction
 import cv2
 import os
+from django.core.files import File
 from django.http import HttpResponse, HttpResponseRedirect
 
 
@@ -20,7 +21,7 @@ class PostCreateView(CreateView):
         fields = ['title', 'cover']
         print("in CreatePostView...")
         template_name = 'post_form.html'
-        #success_url = reverse_lazy('home')
+        success_url = reverse_lazy('home')
 
         def form_valid(self, form):
             self.object = form.save()
@@ -28,8 +29,6 @@ class PostCreateView(CreateView):
             print ("self.model.title=", self.model.title)
             print("self.model.cover=", self.model.cover)
             print(form['cover'])
-            A = Correction(self.object.cover.url)
-            A.skewFix(self.object.cover.url)
             return HttpResponseRedirect(self.get_success_url())
 
 # def img_post(request):
